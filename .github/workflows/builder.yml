name: Java CI with Maven and Docker Deployment

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Récupérer le code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2️⃣ Configurer Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3️⃣ Compiler le projet avec Maven
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # 4️⃣ Créer le Dockerfile dans le workflow
      - name: Create Dockerfile
        run: |
          cat > Dockerfile <<EOF
          # Étape 1 : construire l'application avec Maven
          FROM maven:3.9.3-eclipse-temurin-17 AS build
          WORKDIR /app
          COPY pom.xml .
          COPY src ./src
          RUN mvn clean package -DskipTests

          # Étape 2 : exécuter l'application
          FROM eclipse-temurin:17-jdk
          WORKDIR /app
          COPY --from=build /app/target/CI-CD-0.0.1-SNAPSHOT.jar ./CI-CD-0.0.1-SNAPSHOT.jar
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "CI-CD-0.0.1-SNAPSHOT.jar"]
          EOF

      # 5️⃣ Construire l'image Docker
      - name: Build Docker image
        run: docker build -t monapp-java .

      # 6️⃣ Déployer sur le VPS via SSH
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            # Créer un dossier pour l'application
            mkdir -p ~/app
            cd ~/app

            # Arrêter et supprimer l'ancien conteneur si existant
            docker stop sa-app || true
            docker rm sa-app || true

            # Copier le jar depuis GitHub Actions vers le VPS (optionnel)
            # scp ou rsync peuvent être utilisés si nécessaire

            # Lancer le conteneur Docker
            docker run -d -p 8080:8080 --name sa-app monapp-java
